name: Automated Security Remediation on PR

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image
        run: |
          # Build your image; adjust the Dockerfile path if needed.
          docker build -t ghcr.io/goofyy/research-image:child-old-packages .
      - name: Save Docker Image
        run: |
          docker save -o research-image.tar ghcr.io/goofyy/research-image:child-old-packages
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: research-image
          path: research-image.tar

  scan:
    name: Scan Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: research-image
      - name: Load Docker Image
        run: |
          docker load -i research-image.tar
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ghcr.io/goofyy/research-image:child-old-packages
          format: json
          output: trivy-report.json
          ignore-unfixed: true
      - name: Display Trivy Results in Summary
        run: |
              # Check if report exists and has content
              if [ -s trivy-report.json ]; then
                # Use jq to extract and format vulnerabilities into Markdown
                echo "# Trivy Scan Results" >> $GITHUB_STEP_SUMMARY
                echo "Scanned image: \`ghcr.io/goofyy/research-image:child-old-packages\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                
                # Count vulnerabilities
                vuln_count=$(jq '.[] | select(.Vulnerabilities != null) | .Vulnerabilities | length' trivy-report.json | awk '{s+=$1} END {print s}')
                if [ "$vuln_count" -eq 0 ]; then
                  echo "✅ No vulnerabilities found." >> $GITHUB_STEP_SUMMARY
                else
                  echo "⚠️ Found $vuln_count vulnerabilities:" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | Vulnerability | Severity | Installed Version | Fixed Version |" >> $GITHUB_STEP_SUMMARY
                  echo "|---------|---------------|----------|-------------------|---------------|" >> $GITHUB_STEP_SUMMARY
                  
                  # Extract and append each vulnerability
                  jq -r '.[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | "| \(.PkgName) | \(.VulnerabilityID) | \(.Severity) | \(.InstalledVersion) | \(.FixedVersion // "N/A") |"' trivy-report.json >> $GITHUB_STEP_SUMMARY
                fi
              else
                echo "# Trivy Scan Results" >> $GITHUB_STEP_SUMMARY
                echo "❌ Trivy report not generated or empty." >> $GITHUB_STEP_SUMMARY
              fi
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  analyze:
    name: Analyze vulnerabilities
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Trivy report
        uses: actions/download-artifact@v4
        with:
          name: trivy-report

      - name: Run analysis script
        run: |
          python3 scripts/analyze_vulnerabilities.py trivy-report.json

      - name: Upload remediation plan
        uses: actions/upload-artifact@v4
        with:
          name: remediation-plan
          path: remediation_plan.json

  remediate:
    name: Apply remediation
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.PAT }}

      - name: Download remediation plan
        uses: actions/download-artifact@v4
        with:
          name: remediation-plan

      - name: Set GHCR_TOKEN from PAT secret
        run: echo "GHCR_TOKEN=${{ secrets.PAT }}" >> $GITHUB_ENV

      - name: Install Python deps
        run: pip install requests

      - name: Run remediation script
        id: remediate
        run: |
          # run script and capture its output
          output=$(python3 scripts/remediate.py remediation_plan.json)
          echo "::set-output name=changes::${output}"

      - name: Commit remediation changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Dockerfile package.json
          git commit -m "chore: apply automated security remediation" || echo "No changes to commit"

      - name: Push fixes back to PR branch
        run: |
          git push origin HEAD:${{ github.head_ref }}

      - name: Comment on PR with remediation summary
        uses: actions/github-script@v7
        if: steps.remediate.outputs.changes != ''
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const changes = `\`\`\`\n${{ steps.remediate.outputs.changes }}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔧 **Automated Remediation Applied**\n\nThe following changes were made:\n${changes}`
            });
